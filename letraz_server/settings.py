"""
Django settings for letraz_server project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import socket
from pathlib import Path
from dotenv import load_dotenv
import os
import sentry_sdk
from letraz_server.conf.loggerConfig import LoggingConfig
from letraz_server.contrib.settings_logger import get_settings_logger
from django.core.management.utils import get_random_secret_key

from letraz_server.contrib.validator.environment_validator import DBEnvironmentValidator

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Settings logger - startup_errors.log
logger = get_settings_logger(BASE_DIR=BASE_DIR, filename='Letraz_startup_errors.log')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.environ.get('SECRET')).strip() if os.environ.get('SECRET') else get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(str(os.environ.get('ENV')).strip() == 'DEV')

ALLOWED_HOSTS = []
try:
    ALLOWED_HOSTS.append(socket.gethostbyname(socket.gethostname()))
    ALLOWED_HOSTS.append(socket.gethostbyname(socket.getfqdn()))
except Exception as ex:
    logger.exception('Encountered error while adding host\'s IP address/domain from socket: \n', ex)

ALLOWED_HOSTS += list(filter(None, os.environ.get('ALLOWED_HOSTS', '').split(';')))

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Django Rest Framework
    'rest_framework',
    # OpenAPI Documentation
    'drf_spectacular',
    # Cors header
    "corsheaders",

    # Apps
    'CORE.apps.CoreConfig',
    'JOB.apps.JobConfig',
    'RESUME.apps.ResumeConfig',
    'PROFILE.apps.ProfileConfig'
]

AUTH_USER_MODEL = 'PROFILE.User'

# Clerk Configuration
CLERK_STATUS = 'OPERATIONAL'
CLERK_SECRET_KEY = os.environ.get('CLERK_SECRET_KEY', '')
CLERK_FRONTEND_API_URL = os.environ.get('CLERK_FRONTEND_API_URL', '')
if not CLERK_SECRET_KEY or not CLERK_FRONTEND_API_URL:
    CLERK_STATUS = 'DOWN'
    logger.error('Clerk SECRET_KEY or FRONTEND_API_URL is not provided!')

# Django Rest Framework Settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "letraz_server.contrib.middlewares.clerk_middlewares.ClerkAuthenticationMiddleware",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

# Spectacular (OpenAPI Documentation) Settings
SPECTACULAR_SETTINGS = {
    'SCHEMA_PATH_PREFIX': '/api/v[0-9]',
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'TITLE': 'Letraz Backend Server',
    'DESCRIPTION': 'This is the backend service repository of Letraz. Create tailored resumes for every job application effortlessly with Letraz. Our AI-powered tool helps you stand out by automatically optimizing your resume for ATS and recruiters, ensuring your skills and experience match the job\'s requirements.',
    'VERSION': '0.1.0',
    'SERVE_INCLUDE_SCHEMA': False,

    'SERVERS': [
        {'url': 'https://api.letraz.app/api/v1', 'description': 'Production Server'}
    ],

    'PREPROCESSING_HOOKS': [],
    'POSTPROCESSING_HOOKS': [],
    'ENUM_NAME_OVERRIDES': {},

    # Authentication settings
    # 'SECURITY': [
    #     {
    #         'bearer': {
    #             'type': 'http',
    #             'scheme': 'bearer',
    #             'bearerFormat': 'JWT'
    #         }
    #     }
    # ],
    # 'SECURITY_REQUIREMENTS': [
    #     {'bearer': []}
    # ],

    'TAGS': [
        {'name': 'Core APIs', 'description': 'Core APIs for Letraz Backend'},
        {'name': 'Waitlist', 'description': 'Mange waitlist, signups, retrieve waitlist and everything related to waitlist'},
        {'name': 'User', 'description': 'Get or update user details of currently logged in user'},
        {'name': 'Job object', 'description': 'Manage job objects, retrieve job objects and everything related to job objects'},
        {'name': 'Resume object', 'description': 'Manage resume objects, retrieve resume objects and everything related to resume objects'},
        {'name': 'Education object', 'description': 'Manage education objects, retrieve education objects and everything related to education objects'},
        {'name': 'Experience object', 'description': 'Manage experience objects, retrieve experience objects and everything related to experience objects'},
    ],
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Cors header
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

CORS_ALLOWED_ORIGINS = []
CORS_ALLOWED_ORIGINS += list(filter(None, os.environ.get('CORS_ALLOWED_ORIGINS', '').split(';')))
CSRF_TRUSTED_ORIGINS = []
CSRF_TRUSTED_ORIGINS += list(filter(None, os.environ.get('CSRF_TRUSTED_ORIGINS', '').split(';')))

ROOT_URLCONF = 'letraz_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'letraz_server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DB_STATUS = 'UNINITIALIZED'
if os.environ.get('DB_ENGINE'):
    dbEnvironmentValidator = DBEnvironmentValidator()
    if dbEnvironmentValidator.validate():
        try:
            DATABASES = {
                'default': dbEnvironmentValidator.get_config()
            }
            DB_STATUS = 'OPERATIONAL'
        except Exception as e:
            logger.exception('Exception occurred while connecting to db!')
            DB_STATUS = 'FATAL'
    else:
        logger.error(f'Database environment validation failed! \n{dbEnvironmentValidator.errors.__str__()}')
        DB_STATUS = 'FATAL'
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    DB_STATUS = 'DEGRADED'
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True

PROJECT_NAME = 'Letraz'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging Configuration
LOGGING = LoggingConfig(Path(
    os.environ.get('LOG_FOLDER')) if os.environ.get('LOG_FOLDER') else BASE_DIR / 'logs', log_file_initial=PROJECT_NAME
                        ).get_config()

#  Sentry Setup
SENTRY_STATUS = 'UNINITIALIZED'
if os.environ.get('SENTRY_DSN'):
    try:
        sentry_sdk.init(
            dsn=str(os.environ.get('SENTRY_DSN')).strip(),
            # Set traces_sample_rate to 1.0 to capture 100% of transactions for tracing.
            traces_sample_rate=1.0,
            environment=str(os.environ.get('ENV')).strip(),
            _experiments={
                # Set continuous_profiling_auto_start to True to automatically start the profiler on when possible.
                "continuous_profiling_auto_start": True,
            },
        )
        SENTRY_STATUS = 'OPERATIONAL'
    except Exception as e:
        logger.exception('Error while connecting to Sentry: %s', e)
        SENTRY_STATUS = 'FAILED'
