openapi: 3.0.3
info:
  title: Letraz Backend Server
  version: 0.1.0
  description: This is the backend service repository of Letraz. Create tailored resumes
    for every job application effortlessly with Letraz. Our AI-powered tool helps
    you stand out by automatically optimizing your resume for ATS and recruiters,
    ensuring your skills and experience match the job's requirements.
paths:
  /error-example/:
    get:
      operationId: error_example_retrieve
      description: Returns a sample error response that might occur if an operation
        fails. Note that the HTTP status would raise an error and that's a normal
        behavior.
      summary: Get sample error
      tags:
        - Core APIs
      responses:
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /error-list-example/:
    get:
      operationId: error_list_example_retrieve
      description: Returns a sample error response that might occur if one or more
        operations fails from a bulk operation request. Note that the HTTP status
        would raise an error and that's a normal behavior.
      summary: Get sample error (bulk operations)
      tags:
        - Core APIs
      responses:
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: ''
  /health/:
    get:
      operationId: health_retrieve
      description: Returns the server health status. The sentry status is also included
        in the response
      summary: Get server health status
      tags:
        - Core APIs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /job/{job_id}/:
    get:
      operationId: job_retrieve
      description: Returns the full job object as saved in the database by the job
        ID. If the job is not found, an error response is returned.
      summary: Get job by job ID
      parameters:
        - in: path
          name: job_id
          schema:
            type: string
          required: true
      tags:
        - Job object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobFull'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /user/:
    post:
      operationId: user_create
      description: Send a POST request with the user's data to add a upsert a new
        user info entry. If the user info already exists, it will be updated. If the
        user info does not exist, it will be created.
      summary: Add a new user info
      tags:
        - User info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserInfoUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserInfoUpsert'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /user/{user_id}/:
    get:
      operationId: user_retrieve_2
      description: Returns a user's user info by the user's id. If the user info is
        not found, a 404 error is returned.
      summary: Get user info
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - User info
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /user/{user_id}/resume/:
    get:
      operationId: user_resume_retrieve
      description: Returns a user's resume by the resume's id. If no resume id is
        not specified then returns all resumes. If the resume is not found, a 404
        error is returned.
      summary: Get one or all resume
      parameters:
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Resume object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeFull'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /user/{user_id}/resume/{resume_id}/:
    get:
      operationId: user_resume_retrieve_2
      description: Returns a user's resume by the resume's id. If no resume id is
        not specified then returns all resumes. If the resume is not found, a 404
        error is returned.
      summary: Get one or all resume
      parameters:
        - in: path
          name: resume_id
          schema:
            type: string
          required: true
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Resume object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeFull'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /user/{user_id}/resume/{resume_id}/education/:
    get:
      operationId: user_resume_education_retrieve
      description: Returns a user's education by the education's id. If no education
        id is not specified then returns all educations for the resume as specified
        in the resume id. Send the id of the base resume to get the user's all base
        educations. If the education is not found, a 404 error is returned.
      summary: Get one or all educations
      parameters:
        - in: query
          name: education_id
          schema:
            type: string
          description: Education ID
        - in: path
          name: resume_id
          schema:
            type: string
          required: true
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Education object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationFull'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: user_resume_education_create
      description: Adds a new education to the user's resume as specified in the resume
        id. If a base resume id is provided, the education is added to the base resume.
      summary: Add a new education
      parameters:
        - in: path
          name: resume_id
          schema:
            type: string
          required: true
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Education object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationFull'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /user/{user_id}/resume/{resume_id}/education/{education_id}/:
    get:
      operationId: user_resume_education_retrieve_2
      description: Returns a user's education by the education's id. If no education
        id is not specified then returns all educations for the resume as specified
        in the resume id. Send the id of the base resume to get the user's all base
        educations. If the education is not found, a 404 error is returned.
      summary: Get one or all educations
      parameters:
        - in: path
          name: education_id
          schema:
            type: string
          required: true
        - in: query
          name: education_id
          schema:
            type: string
          description: Education ID
        - in: path
          name: resume_id
          schema:
            type: string
          required: true
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Education object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationFull'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: user_resume_education_destroy_2
      description: Deletes an education from the user's resume as specified in the
        resume id.
      summary: Delete an education
      parameters:
        - in: path
          name: education_id
          schema:
            type: string
          required: true
        - in: query
          name: education_id
          schema:
            type: string
          description: Education ID
          required: true
        - in: path
          name: resume_id
          schema:
            type: string
          required: true
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Education object
      responses:
        '204':
          description: No response body
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /user/{user_id}/resume/{resume_id}/experience/:
    get:
      operationId: user_resume_experience_retrieve
      description: Returns a user's experience by the experience's id. If no experience
        id is not specified then returns all experience for the resume as specified
        in the resume id. Send the id of the base resume to get the user's all base
        experience. If the experience is not found, a 404 error is returned.
      summary: Get one or all experiences
      parameters:
        - in: query
          name: experience_id
          schema:
            type: string
          description: Experience ID
        - in: path
          name: resume_id
          schema:
            type: string
          required: true
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Experience object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceFull'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: user_resume_experience_create
      description: Adds a new experience to the user's resume as specified in the
        resume id. If a base resume id is provided, the experience is added to the
        base resume.
      summary: Add a new experience
      parameters:
        - in: path
          name: resume_id
          schema:
            type: string
          required: true
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Experience object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceFull'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /user/{user_id}/resume/{resume_id}/experience/{experience_id}/:
    get:
      operationId: user_resume_experience_retrieve_2
      description: Returns a user's experience by the experience's id. If no experience
        id is not specified then returns all experience for the resume as specified
        in the resume id. Send the id of the base resume to get the user's all base
        experience. If the experience is not found, a 404 error is returned.
      summary: Get one or all experiences
      parameters:
        - in: path
          name: experience_id
          schema:
            type: string
          required: true
        - in: query
          name: experience_id
          schema:
            type: string
          description: Experience ID
        - in: path
          name: resume_id
          schema:
            type: string
          required: true
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Experience object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceFull'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: user_resume_experience_destroy_2
      description: Deletes an experience from the user's resume as specified in the
        resume id.
      summary: Delete an experience
      parameters:
        - in: path
          name: experience_id
          schema:
            type: string
          required: true
        - in: query
          name: experience_id
          schema:
            type: string
          description: Experience ID
          required: true
        - in: path
          name: resume_id
          schema:
            type: string
          required: true
        - in: query
          name: resume_id
          schema:
            type: string
          description: Resume ID
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          description: User ID
          required: true
      tags:
        - Experience object
      responses:
        '204':
          description: No response body
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /waitlist/:
    get:
      operationId: waitlist_list
      description: Returns all waitlist entries ordered by waiting number. The waiting
        number is the order in which the user joined the waitlist.
      summary: Get all waitlists
      tags:
        - Waitlist
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Waitlist'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: waitlist_create
      description: Send a POST request with the email of the user and optionally a
        ref string to add a new waitlist entry. Returns the newly created waitlist
        entry with the waiting number and created_at timestamp.
      summary: Add a new waitlist
      tags:
        - Waitlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Waitlist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Waitlist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Waitlist'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Waitlist'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
components:
  schemas:
    Country:
      type: object
      properties:
        code:
          type: string
          description: The ISO 3166-1 alpha-3 code of the country.
          maxLength: 3
        name:
          type: string
          description: The name of the country.
          maxLength: 250
      required:
        - code
        - name
    EducationFull:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The unique identifier for the education entry.
        user:
          type: string
          description: The user who the education entry belongs to.
        resume_section:
          type: string
          format: uuid
          description: The resume section the education entry belongs to.
        institution_name:
          type: string
          description: The name of the institution the user studied at.
          maxLength: 250
        field_of_study:
          type: string
          description: The field of study the user studied.
          maxLength: 250
        degree:
          type: string
          nullable: true
          description: The degree the user obtained. (optional)
          maxLength: 250
        country:
          type: string
          readOnly: true
        started_from_month:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The month the user started studying. (optional)
        started_from_year:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The year the user started studying. (optional)
        finished_at_month:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The month the user finished studying. (optional)
        finished_at_year:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The year the user finished studying. (optional)
        current:
          type: boolean
          description: 'Whether the user is currently studying. default: False'
        description:
          type: string
          nullable: true
          description: The description of the education entry. User can provide any
            kind of description for that user. Usually in HTML format to support rich
            text. (optional)
          maxLength: 3000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the education entry was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the education entry was last updated.
      required:
        - country
        - created_at
        - field_of_study
        - id
        - institution_name
        - resume_section
        - updated_at
        - user
    Error:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: The unique identifier for the error response. This is useful
            for tracking the error in the logs and in Sentry if it is enabled.
        code:
          type: string
          description: The error code that is unique to the error type. This can be
            used to identify the error type and can be used for debugging.
        message:
          type: string
          description: The error message that is human readable and can be used to
            understand the error. Usually fit to be displayed to the user.
        details:
          type: string
          description: The error details that can be used to understand the error
            in more detail. This can be used for debugging purposes.
        extra:
          type: string
          description: The extra data that can be used to understand the error in
            more detail. This is usually not displayed to the user and might include
            stacktrace and sensitive information.
      required:
        - code
        - details
        - extra
        - message
        - uuid
    ErrorList:
      type: object
      properties:
        code:
          type: string
          description: The error code that is unique to the error type. This can be
            used to identify the error type and can be used for debugging.
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        message:
          type: string
          description: The error message that is human readable and can be used to
            understand the error. Usually fit to be displayed to the user.
      required:
        - code
        - errors
        - message
    ExperienceFull:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The unique identifier for the experience entry.
        user:
          type: string
          description: The user who the experience entry belongs to.
        resume_section:
          type: string
          format: uuid
          description: The unique identifier for the resume section entry.
        company_name:
          type: string
          description: The name of the company the user worked at.
          maxLength: 250
        job_title:
          type: string
          description: The title of the job the user had.
          maxLength: 250
        employment_type:
          type: string
          readOnly: true
        city:
          type: string
          nullable: true
          description: The city the company is located in. (optional)
          maxLength: 50
        country:
          type: string
          readOnly: true
        started_from_month:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The month the user started working.
        started_from_year:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The year the user started working.
        finished_at_month:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The month the user finished working. (optional)
        finished_at_year:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The year the user finished working. (optional)
        current:
          type: boolean
          description: 'Whether the user is currently working. default: False'
        description:
          type: string
          nullable: true
          description: The description of the experience entry. User can provide any
            kind of description for that user. Usually in HTML format to support rich
            text. (optional)
          maxLength: 3000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the experience entry was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the experience entry was last updated.
      required:
        - company_name
        - country
        - created_at
        - employment_type
        - id
        - job_title
        - resume_section
        - updated_at
        - user
    HealthCheck:
      type: object
      properties:
        status:
          type: string
          description: The health status of the server. The status can be ok, degraded
            or failing.
        sentry:
          type: boolean
          default: true
          description: The status of the sentry integration. If False, the sentry
            is not initialized, possibly due to absense of environment variables,
            which is expected or misconfigured initialization.
      required:
        - status
    JobFull:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the job entry.
        job_url:
          type: string
          nullable: true
          description: The URL of the job posting. (optional)
          maxLength: 1000
        title:
          type: string
          description: The title of the job as mentioned in the job posting. If not
            available, a meaningful title would be auto-generated.
          maxLength: 250
        company_name:
          type: string
          description: The name of the company that posted the job.
          maxLength: 250
        location:
          type: string
          nullable: true
          description: The location of the job as mentioned in the job posting. (optional)
          maxLength: 100
        currency:
          type: string
          nullable: true
          description: The currency code of the salary. (optional)
          maxLength: 5
        salary_max:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The maximum salary of the job as mentioned in the job posting.
            (optional)
        salary_min:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: The minimum salary of the job as mentioned in the job posting.
            (optional)
        requirements:
          nullable: true
          description: An array representation of the requirements of the job as mentioned
            in the job posting. (optional)
        description:
          type: string
          nullable: true
          description: The description of the job as mentioned in the job posting.
            (optional)
          maxLength: 3000
        responsibilities:
          nullable: true
          description: An array representation of the responsibilities the candidate
            would be undertaking as mentioned in the job posting. (optional)
        benefits:
          nullable: true
          description: An array representation of the benefits the candidate would
            get as mentioned in the job posting. (optional)
      required:
        - company_name
        - id
        - title
    ResumeFull:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the resume entry.
        base:
          type: boolean
          description: 'Whether the resume is a base resume for the user. One user
            can '
        user:
          type: string
          readOnly: true
        job:
          type: string
          readOnly: true
        sections:
          type: string
          readOnly: true
      required:
        - id
        - job
        - sections
        - user
    UserInfo:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the user. Typically provided from
            the client side while creating the user.
        title:
          type: string
          nullable: true
          description: The title of the user. This can be Mr., Mrs., Dr., etc. (optional)
          maxLength: 10
        first_name:
          type: string
          description: The first name of the user.
          maxLength: 50
        last_name:
          type: string
          nullable: true
          description: The last name of the user. (optional)
          maxLength: 50
        email:
          type: string
          format: email
          description: The email of the user. Needs to be unique and a valid email.
          maxLength: 254
        phone:
          type: string
          nullable: true
          description: The phone number of the user. (optional)
          maxLength: 25
        dob:
          type: string
          format: date
          nullable: true
          description: The date of birth of the user. (optional)
        nationality:
          type: string
          nullable: true
          description: The nationality of the user. (optional)
          maxLength: 50
        address:
          type: string
          nullable: true
          description: The address line of the user. Typically includes the apartment
            or plot number and the locality. (optional)
          maxLength: 500
        city:
          type: string
          nullable: true
          description: The city the user lives in. (optional)
          maxLength: 50
        postal:
          type: string
          nullable: true
          description: The postal code of the user. (optional)
          maxLength: 50
        country:
          $ref: '#/components/schemas/Country'
        website:
          type: string
          nullable: true
          description: The user's personal portfolio or blog website. (optional)
          maxLength: 50
        profile_text:
          type: string
          nullable: true
          description: The profile text of the user. This can be a short bio or a
            summary This would be shows on top of the user's resume. (optional)
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user was last updated.
      required:
        - country
        - created_at
        - email
        - first_name
        - id
        - updated_at
    UserInfoUpsert:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the user. Typically provided from
            the client side while creating the user.
          maxLength: 32
        title:
          type: string
          nullable: true
          description: The title of the user. This can be Mr., Mrs., Dr., etc. (optional)
          maxLength: 10
        first_name:
          type: string
          description: The first name of the user.
          maxLength: 50
        last_name:
          type: string
          nullable: true
          description: The last name of the user. (optional)
          maxLength: 50
        email:
          type: string
          format: email
          description: The email of the user. Needs to be unique and a valid email.
          maxLength: 254
        phone:
          type: string
          nullable: true
          description: The phone number of the user. (optional)
          maxLength: 25
        dob:
          type: string
          format: date
          nullable: true
          description: The date of birth of the user. (optional)
        nationality:
          type: string
          nullable: true
          description: The nationality of the user. (optional)
          maxLength: 50
        address:
          type: string
          nullable: true
          description: The address line of the user. Typically includes the apartment
            or plot number and the locality. (optional)
          maxLength: 500
        city:
          type: string
          nullable: true
          description: The city the user lives in. (optional)
          maxLength: 50
        postal:
          type: string
          nullable: true
          description: The postal code of the user. (optional)
          maxLength: 50
        website:
          type: string
          nullable: true
          description: The user's personal portfolio or blog website. (optional)
          maxLength: 50
        profile_text:
          type: string
          nullable: true
          description: The profile text of the user. This can be a short bio or a
            summary This would be shows on top of the user's resume. (optional)
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user was last updated.
        country:
          type: string
          description: The country the user lives in. (optional)
          nullable: true
      required:
        - created_at
        - email
        - first_name
        - id
        - updated_at
    Waitlist:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The unique identifier for the waitlist entry.
        email:
          type: string
          format: email
          description: The email of the user who joined the waitlist.
          maxLength: 254
        referrer:
          type: string
          description: The referrer of the user who joined the waitlist. Usually the
            source they have come from.
          maxLength: 50
        waiting_number:
          type: integer
          readOnly: true
          description: The waiting number of the user who joined the waitlist.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user joined the waitlist.
      required:
        - created_at
        - email
        - id
        - waiting_number
servers:
  - url: http://localhost:8000/api/v1
    description: Local Development Server
tags:
  - name: Core APIs
    description: Core APIs for Letraz Backend
  - name: Waitlist
    description: Mange waitlist, signups, retrieve waitlist and everything related to
      waitlist
  - name: User info
    description: Manage user info, retrieve, create, update user info and everything
      related to user info
  - name: Job object
    description: Manage job objects, retrieve job objects and everything related to
      job objects
  - name: Resume object
    description: Manage resume objects, retrieve resume objects and everything related
      to resume objects
  - name: Education object
    description: Manage education objects, retrieve education objects and everything
      related to education objects
  - name: Experience object
    description: Manage experience objects, retrieve experience objects and everything
      related to experience objects
