# Generated by Django 5.1.4 on 2025-01-28 17:44

import RESUME.models
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('CORE', '0001_initial'),
        ('JOB', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.CharField(default=RESUME.models.generate_resume_id, editable=False, help_text='The unique identifier for the resume entry.', max_length=25, primary_key=True, serialize=False)),
                ('base', models.BooleanField(default=False, help_text='Whether the resume is a base resume for the user. One user can ')),
                ('version', models.IntegerField(default=1, help_text='The version of the resume.')),
                ('job', models.ForeignKey(blank=True, help_text="The job the resume is for. (optional in case it's a base resume for the user.)", null=True, on_delete=django.db.models.deletion.CASCADE, to='JOB.job')),
                ('user', models.ForeignKey(help_text='The user who the resume belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('variations', models.ManyToManyField(blank=True, null=True, related_name='related_resumes', to='RESUME.resume')),
            ],
        ),
        migrations.CreateModel(
            name='ResumeSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier for the resume section entry.', primary_key=True, serialize=False)),
                ('index', models.IntegerField(help_text='The index of the section in the resume. This number determines the position of the section in the resume. (0-based)')),
                ('type', models.CharField(choices=[('edu', 'Education'), ('exp', 'Experience'), ('oth', 'Others')], help_text='The type of the section. Can be Education, Experience, Skill, Strength, Project or Others.', max_length=3)),
                ('resume', models.ForeignKey(help_text='The resume the section belongs to.', on_delete=django.db.models.deletion.CASCADE, to='RESUME.resume')),
            ],
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier for the experience entry.', primary_key=True, serialize=False)),
                ('company_name', models.CharField(help_text='The name of the company the user worked at.', max_length=250)),
                ('job_title', models.CharField(help_text='The title of the job the user had.', max_length=250)),
                ('employment_type', models.CharField(choices=[('flt', 'Full Time'), ('prt', 'Part Time'), ('con', 'Contract'), ('int', 'Internship'), ('fre', 'Freelance'), ('sel', 'Self Employed'), ('vol', 'Volunteer'), ('tra', 'Trainee')], help_text='The type of employment the user had. Can be Full Time, Part Time, Contract, Internship, Freelance, Self Employed, Volunteer or Trainee.', max_length=3)),
                ('city', models.CharField(blank=True, help_text='The city the company is located in. (optional)', max_length=50, null=True)),
                ('started_from_month', models.PositiveSmallIntegerField(blank=True, help_text='The month the user started working.', null=True)),
                ('started_from_year', models.PositiveSmallIntegerField(blank=True, help_text='The year the user started working.', null=True)),
                ('finished_at_month', models.PositiveSmallIntegerField(blank=True, help_text='The month the user finished working. (optional)', null=True)),
                ('finished_at_year', models.PositiveSmallIntegerField(blank=True, help_text='The year the user finished working. (optional)', null=True)),
                ('current', models.BooleanField(default=False, help_text='Whether the user is currently working. default: False')),
                ('description', models.TextField(blank=True, help_text='The description of the experience entry. User can provide any kind of description for that user. Usually in HTML format to support rich text. (optional)', max_length=3000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the experience entry was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time the experience entry was last updated.')),
                ('country', models.ForeignKey(blank=True, help_text='The country the company is located in. (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='CORE.country')),
                ('user', models.ForeignKey(help_text='The user who the experience entry belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resume_section', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='RESUME.resumesection')),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier for the education entry.', primary_key=True, serialize=False)),
                ('institution_name', models.CharField(help_text='The name of the institution the user studied at.', max_length=250)),
                ('field_of_study', models.CharField(help_text='The field of study the user studied.', max_length=250)),
                ('degree', models.CharField(blank=True, help_text='The degree the user obtained. (optional)', max_length=250, null=True)),
                ('started_from_month', models.PositiveSmallIntegerField(blank=True, help_text='The month the user started studying. (optional)', null=True)),
                ('started_from_year', models.PositiveSmallIntegerField(blank=True, help_text='The year the user started studying. (optional)', null=True)),
                ('finished_at_month', models.PositiveSmallIntegerField(blank=True, help_text='The month the user finished studying. (optional)', null=True)),
                ('finished_at_year', models.PositiveSmallIntegerField(blank=True, help_text='The year the user finished studying. (optional)', null=True)),
                ('current', models.BooleanField(default=False, help_text='Whether the user is currently studying. default: False')),
                ('description', models.TextField(blank=True, help_text='The description of the education entry. User can provide any kind of description for that user. Usually in HTML format to support rich text. (optional)', max_length=3000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the education entry was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time the education entry was last updated.')),
                ('country', models.ForeignKey(blank=True, help_text='The country the institution is located in. (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='CORE.country')),
                ('user', models.ForeignKey(help_text='The user who the education entry belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resume_section', models.OneToOneField(help_text='The resume section the education entry belongs to.', on_delete=django.db.models.deletion.CASCADE, to='RESUME.resumesection')),
            ],
        ),
        migrations.AddConstraint(
            model_name='resume',
            constraint=models.UniqueConstraint(fields=('user', 'job', 'version'), name='unique_resume_per_job', violation_error_message='This job is already have a resume.'),
        ),
        migrations.AddConstraint(
            model_name='resume',
            constraint=models.UniqueConstraint(fields=('user', 'base', 'version'), name='unique_base_resume', violation_error_message='Base resume already exists.'),
        ),
        migrations.AlterUniqueTogether(
            name='resumesection',
            unique_together={('resume', 'index')},
        ),
    ]
