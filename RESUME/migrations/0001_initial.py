# Generated by Django 5.2.4 on 2025-07-26 07:09

import RESUME.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('CORE', '0001_initial'),
        ('JOB', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.CharField(default=RESUME.models.generate_resume_id, editable=False, help_text='The unique identifier for the resume entry.', max_length=25, primary_key=True, serialize=False)),
                ('base', models.BooleanField(default=False, help_text='Whether the resume is a base resume for the user. One user can ')),
                ('version', models.IntegerField(default=1, help_text='The version of the resume.')),
                ('processing', models.BooleanField(default=False)),
                ('job', models.ForeignKey(blank=True, help_text="The job the resume is for. (optional in case it's a base resume for the user.)", null=True, on_delete=django.db.models.deletion.SET_NULL, to='JOB.job')),
                ('process', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='CORE.process')),
                ('user', models.ForeignKey(help_text='The user who the resume belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('variations', models.ManyToManyField(blank=True, related_name='related_resumes', to='RESUME.resume')),
            ],
        ),
        migrations.CreateModel(
            name='ResumeSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier for the resume section entry.', primary_key=True, serialize=False)),
                ('index', models.IntegerField(help_text='The index of the section in the resume. This number determines the position of the section in the resume. (0-based)')),
                ('type', models.CharField(choices=[('edu', 'Education'), ('exp', 'Experience'), ('skl', 'Skill'), ('prj', 'Project'), ('crt', 'Certification'), ('oth', 'Others')], help_text='The type of the section. Can be Education, Experience, Skill, Strength, Project or Others.', max_length=3)),
                ('resume', models.ForeignKey(help_text='The resume the section belongs to.', on_delete=django.db.models.deletion.CASCADE, to='RESUME.resume')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the project', primary_key=True, serialize=False)),
                ('category', models.CharField(blank=True, help_text='Category or type of the project (e.g., Web Development, Mobile App).', max_length=255, null=True)),
                ('name', models.CharField(help_text='Name of the project.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the project and its objectives.', null=True)),
                ('role', models.CharField(blank=True, help_text='Your role or position in this project (e.g., Lead Developer, UI Designer).', max_length=255, null=True)),
                ('github_url', models.URLField(blank=True, help_text="Link to the project's GitHub repository.", null=True)),
                ('live_url', models.URLField(blank=True, help_text='Link to the live/deployed version of the project.', null=True)),
                ('started_from_month', models.IntegerField(blank=True, help_text='Month when the project started (1-12).', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('started_from_year', models.IntegerField(blank=True, help_text='Year when the project started (YYYY).', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('finished_at_month', models.IntegerField(blank=True, help_text='Month when the project was completed (1-12).', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('finished_at_year', models.IntegerField(blank=True, help_text='Year when the project was completed (YYYY).', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('current', models.BooleanField(blank=True, help_text='Indicates if this is a current/ongoing project.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the project was first created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the project was last updated.')),
                ('skills_used', models.ManyToManyField(blank=True, help_text='Technical skills and technologies used in this project.', related_name='skills_used', to='CORE.skill')),
                ('user', models.ForeignKey(help_text='The user who owns this project', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resume_section', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='RESUME.resumesection')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Proficiency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier for the experience entry.', primary_key=True, serialize=False)),
                ('level', models.CharField(choices=[('BEG', 'Beginner'), ('INT', 'Intermediate'), ('ADV', 'Advanced'), ('EXP', 'Expert')], max_length=3, null=True)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CORE.skill')),
                ('resume_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RESUME.resumesection')),
            ],
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier for the experience entry.', primary_key=True, serialize=False)),
                ('company_name', models.CharField(help_text='The name of the company the user worked at.', max_length=250)),
                ('job_title', models.CharField(help_text='The title of the job the user had.', max_length=250)),
                ('employment_type', models.CharField(choices=[('flt', 'Full Time'), ('prt', 'Part Time'), ('con', 'Contract'), ('int', 'Internship'), ('fre', 'Freelance'), ('sel', 'Self Employed'), ('vol', 'Volunteer'), ('tra', 'Trainee')], help_text='The type of employment the user had. Can be Full Time, Part Time, Contract, Internship, Freelance, Self Employed, Volunteer or Trainee.', max_length=3)),
                ('city', models.CharField(blank=True, help_text='The city the company is located in. (optional)', max_length=50, null=True)),
                ('started_from_month', models.IntegerField(blank=True, help_text='Month when the experience started (1-12).', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('started_from_year', models.IntegerField(blank=True, help_text='Year when the experience started (YYYY).', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('finished_at_month', models.IntegerField(blank=True, help_text='Month when the experience was completed (1-12).', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('finished_at_year', models.IntegerField(blank=True, help_text='Year when the experience was completed (YYYY).', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('current', models.BooleanField(default=False, help_text='Whether the user is currently working. default: False')),
                ('description', models.TextField(blank=True, help_text='The description of the experience entry. User can provide any kind of description for that user. Usually in HTML format to support rich text. (optional)', max_length=3000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the experience entry was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time the experience entry was last updated.')),
                ('country', models.ForeignKey(blank=True, help_text='The country the company is located in. (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='CORE.country')),
                ('user', models.ForeignKey(help_text='The user who the experience entry belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resume_section', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='RESUME.resumesection')),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier for the education entry.', primary_key=True, serialize=False)),
                ('institution_name', models.CharField(help_text='The name of the institution the user studied at.', max_length=250)),
                ('field_of_study', models.CharField(help_text='The field of study the user studied.', max_length=250)),
                ('degree', models.CharField(blank=True, help_text='The degree the user obtained. (optional)', max_length=250, null=True)),
                ('started_from_month', models.IntegerField(blank=True, help_text='Month when the education started (1-12).', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('started_from_year', models.IntegerField(blank=True, help_text='Year when the education started (YYYY).', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('finished_at_month', models.IntegerField(blank=True, help_text='Month when the education was completed (1-12).', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('finished_at_year', models.IntegerField(blank=True, help_text='Year when the education was completed (YYYY).', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('current', models.BooleanField(default=False, help_text='Whether the user is currently studying. default: False')),
                ('description', models.TextField(blank=True, help_text='The description of the education entry. User can provide any kind of description for that user. Usually in HTML format to support rich text. (optional)', max_length=3000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the education entry was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time the education entry was last updated.')),
                ('country', models.ForeignKey(blank=True, help_text='The country the institution is located in. (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='CORE.country')),
                ('user', models.ForeignKey(help_text='The user who the education entry belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resume_section', models.OneToOneField(help_text='The resume section the education entry belongs to.', on_delete=django.db.models.deletion.CASCADE, to='RESUME.resumesection')),
            ],
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the certification', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the certification.', max_length=255)),
                ('issuing_organization', models.CharField(blank=True, max_length=255, null=True)),
                ('issue_date', models.DateField(blank=True, help_text='Date when the certification was issued.', null=True)),
                ('credential_url', models.URLField(blank=True, help_text='Link to the certification credential.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the certification was first created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the certification was last updated.')),
                ('user', models.ForeignKey(help_text='The user who owns this certification', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resume_section', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='RESUME.resumesection')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='resume',
            constraint=models.UniqueConstraint(fields=('user', 'job'), name='unique_resume_per_job', violation_error_message='This job is already have a resume.'),
        ),
        migrations.AddConstraint(
            model_name='resume',
            constraint=models.UniqueConstraint(condition=models.Q(('base', True)), fields=('user', 'base'), name='unique_base_resume', violation_error_message='Base resume already exists.'),
        ),
        migrations.AlterUniqueTogether(
            name='resumesection',
            unique_together={('resume', 'index')},
        ),
    ]
