openapi: 3.0.3
info:
  title: Letraz Backend Server
  version: 0.1.0
  description: This is the backend service repository of Letraz. Create tailored resumes
    for every job application effortlessly with Letraz. Our AI-powered tool helps
    you stand out by automatically optimizing your resume for ATS and recruiters,
    ensuring your skills and experience match the job's requirements.
paths:
  /admin/resumes/{resume_id}/:
    get:
      operationId: admin_resumes_retrieve
      description: Returns complete resume data including all associated sections
        (PersonalInfo, Education, Experience, Skills, Projects, Certifications). Requires
        admin API key authentication.
      summary: '[ADMIN] Get resume data'
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
          format: uuid
        description: The unique identifier of the resume to retrieve
        required: true
      - in: header
        name: x-admin-api-key
        schema:
          type: string
        description: Admin API key for authentication
        required: true
      tags:
      - Admin - Resume
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeFull'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /admin/waitlist/:
    get:
      operationId: admin_waitlist_list
      description: Returns all waitlist entries ordered by waiting number. Requires
        admin API key authentication.
      summary: '[ADMIN] Get all waitlists'
      parameters:
      - in: header
        name: x-admin-api-key
        schema:
          type: string
        description: Admin API key for authentication
        required: true
      tags:
      - Admin - Waitlist
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Waitlist'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /admin/waitlist/{waitlist_id}/:
    post:
      operationId: admin_waitlist_create
      description: Update a specific waitlist entry by ID. Currently supports updating
        the has_access field. Requires admin API key authentication.
      summary: '[ADMIN] Update waitlist entry'
      parameters:
      - in: path
        name: waitlist_id
        schema:
          type: string
          format: uuid
        description: The Waitlist ID to update
        required: true
      - in: header
        name: x-admin-api-key
        schema:
          type: string
        description: Admin API key for authentication
        required: true
      tags:
      - Admin - Waitlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitlistUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WaitlistUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WaitlistUpdate'
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Waitlist'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /admin/waitlist/bulk-update/:
    post:
      operationId: admin_waitlist_bulk_update_create
      description: Update multiple waitlist entries at once. Currently supports updating
        the has_access field for multiple users. Requires admin API key authentication.
      summary: '[ADMIN] Bulk update waitlist entries'
      parameters:
      - in: header
        name: x-admin-api-key
        schema:
          type: string
        description: Admin API key for authentication
        required: true
      tags:
      - Admin - Waitlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitlistBulkUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WaitlistBulkUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WaitlistBulkUpdate'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WaitlistBulkUpdateResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /error-example/:
    get:
      operationId: error_example_retrieve
      description: Returns a sample error response that might occur if an operation
        fails. Note that the HTTP status would raise an error and that's a normal
        behavior.
      summary: Get sample error
      tags:
      - Core APIs
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /error-list-example/:
    get:
      operationId: error_list_example_retrieve
      description: Returns a sample error response that might occur if one or more
        operations fails from a bulk operation request. Note that the HTTP status
        would raise an error and that's a normal behavior.
      summary: Get sample error (bulk operations)
      tags:
      - Core APIs
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorListEnvelope'
          description: ''
  /health/:
    get:
      operationId: health_retrieve
      description: Returns the server health status. The sentry status is also included
        in the response
      summary: Get server health status
      tags:
      - Core APIs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: ''
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: ''
  /job/{job_id}/:
    get:
      operationId: job_retrieve
      description: Returns the full job object as saved in the database by the job
        ID. If the job is not found, an error response is returned.
      summary: Get job by job ID
      parameters:
      - in: path
        name: job_id
        schema:
          type: string
        description: The Job ID
        required: true
      tags:
      - Job object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/:
    get:
      operationId: resume_list
      description: Gives a list of all resumes for the user. If no resumes are found,
        an empty list is returned.
      summary: Get all resume
      tags:
      - Resume object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResumeShort'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{id}/:
    get:
      operationId: resume_retrieve
      description: Gives a resume for the user by produced id or gives base resume
        of the user if id is provided as `base`.
      summary: Get resume by id
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Resume ID
        required: true
      tags:
      - Resume object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeFull'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    put:
      operationId: resume_update
      description: Replace all sections of a resume with the provided ordered list
        of sections.
      summary: Replace resume sections
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Resume ID
        required: true
      tags:
      - Resume object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeReplace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeReplace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeReplace'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{id}/export/:
    get:
      operationId: resume_export_retrieve
      description: Exports a resume by its ID and returns the exported resume's PDF
        and TEX URL from DigitalOcean CDN
      summary: Export a resume
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Resume ID
        required: true
      tags:
      - Resume object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeExportResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{id}/sections/rearrange/:
    put:
      operationId: resume_sections_rearrange_update
      description: Rearrange the order of sections in a resume by providing an array
        of section IDs in the desired order.
      summary: Rearrange resume sections
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Resume object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectionRearrange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SectionRearrange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SectionRearrange'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/certification/:
    get:
      operationId: resume_certification_list
      description: Gives all certifications for the Resume id or base if `base` is
        provided as resume id
      summary: Get all certifications
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the certification belongs to. If you
          want to interact with the base resume certification, just put `base` in
          here
        required: true
      tags:
      - Certification object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certification'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    post:
      operationId: resume_certification_create
      description: |-
        Adds a new certification to the user's resume as specified in the resume id.
        If a `base` is provided as resume id, the certification is added to the base resume.
      summary: Create a new certification
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the certification belongs to. If you
          want to interact with the base resume certification, just put `base` in
          here
        required: true
      tags:
      - Certification object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificationUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CertificationUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CertificationUpsert'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/certification/{id}/:
    get:
      operationId: resume_certification_retrieve
      description: Gives the certification of the resume for the user by produced
        id or gives base resume certification of the user if id is provided as `base`.
      summary: Get certification by id
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Certification ID
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the certification belongs to. If you
          want to interact with the base resume certification, just put `base` in
          here
        required: true
      tags:
      - Certification object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    patch:
      operationId: resume_certification_partial_update
      description: |-
        Updates an existing certification of the user's resume as specified in the resume id.
        If a `base` is provided as resume id, the certification is added to the base resume.
      summary: Update a certification
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: ID of the certification that you want to update
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the certification belongs to. If you
          want to interact with the base resume certification, just put `base` in
          here
        required: true
      tags:
      - Certification object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCertificationUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCertificationUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCertificationUpsert'
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    delete:
      operationId: resume_certification_destroy
      description: |-
        Delete an existing certification of the user's resume as specified in the resume id.
        If a `base` is provided as resume id, the certification will be  deleted from to the base resume.
      summary: Delete a certification
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: ID of the certification that you want to delete
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the certification belongs to. If you
          want to interact with the base resume certification, just put `base` in
          here
        required: true
      tags:
      - Certification object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/education/:
    get:
      operationId: resume_education_list
      description: Returns all education for the resume id of the user
      summary: Get all educations
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Education object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EducationFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    post:
      operationId: resume_education_create
      description: |-
        Adds a new education to the user's resume as specified in the resume id.
        If a base is provided as the resume_id, the education is added to the base resume.
      summary: Add a new education
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Education object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EducationUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EducationUpsert'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/education/{id}/:
    get:
      operationId: resume_education_retrieve
      description: Returns a user's education by the education's id.
      summary: Get education by id
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Education ID of the education you want to retrieve
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Education object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationFull'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    patch:
      operationId: resume_education_partial_update
      description: |-
        Updates an existing education entry from the user's resume as specified in the resume id.
        If a base is provided as the resume_id, the education is updated in the base resume.
      summary: Update an education
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Education ID of the education you want to update
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Education object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEducationUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEducationUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEducationUpsert'
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    delete:
      operationId: resume_education_destroy
      description: Deletes an education from the user's resume as specified in the
        resume id.
      summary: Delete an education
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Education ID of the education you want to delete
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Education object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/experience/:
    get:
      operationId: resume_experience_list
      description: Gives all experiences for the Resume id
      summary: Get all experiences
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Experience object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExperienceFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    post:
      operationId: resume_experience_create
      description: |-
        Adds a new experience to the user's resume as specified in the resume id.
        If a base resume id is provided, the experience is added to the base resume.
      summary: Create a new experience
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Experience object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExperienceUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExperienceUpsert'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/experience/{id}/:
    get:
      operationId: resume_experience_retrieve
      description: Gives experience by id and resume id
      summary: Get experience by id
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Experience ID of the experience you want to retrieve
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Experience object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceFull'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    patch:
      operationId: resume_experience_partial_update
      description: |-
        Updates an existing experience in the user's resume as specified in the resume id.
        If a base is provided as the resume_id, the experience is updated in the base resume.
      summary: Update an experience
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Experience ID of the experience you want to update
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Experience object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExperienceUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExperienceUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExperienceUpsert'
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    delete:
      operationId: resume_experience_destroy
      description: Deletes an experience from the user's resume as specified in the
        resume id.
      summary: Delete an experience
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: Experience ID of the experience you want to delete
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base educations, just put `base` in here
        required: true
      tags:
      - Experience object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/project/:
    get:
      operationId: resume_project_list
      description: Gives all projects for the Resume id or base if `base`  is provided
        as resume id
      summary: Get all projects
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base project, just put `base` in here
        required: true
      tags:
      - Project object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    post:
      operationId: resume_project_create
      description: |-
        Adds a new project to the user's resume as specified in the resume id.
        If a `base` is provided as resume id, the Project is added to the base resume.
      summary: Create a new project
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base project, just put `base` in here
        required: true
      tags:
      - Project object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectUpsert'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/project/{id}/:
    patch:
      operationId: resume_project_partial_update
      description: |-
        Updates an existing project of the user's resume as specified in the resume id.
        If a `base` is provided as resume id, the Project is added to the base resume.
      summary: Update a project
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: ID of the project that you want to update
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base project, just put `base` in here
        required: true
      tags:
      - Project object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpsert'
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    delete:
      operationId: resume_project_destroy
      description: |-
        Delete an existing project of the user's resume as specified in the resume id.
        If a `base` is provided as resume id, the Project is added to the base resume.
      summary: Delete a project
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: ID of the project that you want to delete
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base project, just put `base` in here
        required: true
      tags:
      - Project object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/skill/:
    get:
      operationId: resume_skill_list
      description: Gives all skill for the Resume id or base if `base`  is provided
        as resume id
      summary: Get all skills of resume
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base Skill, just put `base` in here
        required: true
      tags:
      - Skill object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proficiency'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    post:
      operationId: resume_skill_create
      description: |-
        Adds a new Skill to the user's resume as specified in the resume id.
        If a `base` is provided as resume id, the Skill is added to the base resume.
      summary: Add a new skill
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base Skill, just put `base` in here
        required: true
      tags:
      - Skill object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeSkillUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResumeSkillUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResumeSkillUpsert'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proficiency'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/skill/{id}/:
    patch:
      operationId: resume_skill_partial_update
      description: |-
        Update an existing Skill-proficiency to the user's resume as specified in the resume id.
        If a base resume id is provided, the Skill is updated for the base resume.
      summary: Update an existing skill
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: ID of the Skill-proficiency you want to update for the resume
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base Skill, just put `base` in here
        required: true
      tags:
      - Skill object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProficiency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProficiency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProficiency'
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proficiency'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    delete:
      operationId: resume_skill_destroy
      description: Deletes a skill-proficiency from the user's resume as specified
        in the resume id or base resume if `base ids provided as resume id`.
      summary: Remove skill from resume
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pk
        schema:
          type: string
        description: ID of the Skill-proficiency you want to delete for the resume
        required: true
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base Skill, just put `base` in here
        required: true
      tags:
      - Skill object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/{resume_id}/skill/categories/:
    get:
      operationId: resume_skill_categories_list
      description: Get all skill category for the resume
      summary: Get all skill category for the resume
      parameters:
      - in: path
        name: resume_id
        schema:
          type: string
        description: Resume ID of the resume the education belongs to. If you want
          to interact with the base Skill, just put `base` in here
        required: true
      tags:
      - Skill object
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /resume/tailor/:
    post:
      operationId: resume_tailor_create
      description: Start resume tailoring process
      summary: Start resume tailoring process
      tags:
      - Resume object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TailorRequest'
            examples:
              URLTarget:
                value:
                  target: https://company.example/jobs/1234-senior-engineer
                summary: Tailor using a job URL
              DescriptionTarget:
                value:
                  target: We are seeking a senior backend engineer with Python, Django,
                    PostgreSQL...
                summary: Tailor using long job description
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TailorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TailorRequest'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeFull'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /skill/:
    get:
      operationId: skill_list
      description: Get all skills available in the database across users and resumes
      summary: Get all global skills
      tags:
      - Skill object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /skill/categories/:
    get:
      operationId: skill_categories_retrieve
      description: Get all skills available in the database across users and resumes
      summary: Get all global skill categories
      tags:
      - Skill object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /user/:
    get:
      operationId: user_retrieve
      description: Returns a user's user info by the user's id. If the user info is
        not found, a 404 error is returned.
      summary: Get current user info
      tags:
      - User
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    patch:
      operationId: user_partial_update
      description: |-
        Send a PATCH request with the user's data to add or upsert a user info entry.
        If the user info already exists, it will be updated. If the user info does not exist, it will be created.
      summary: Update current user info
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserUpsert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserUpsert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserUpsert'
      security:
      - basicAuth: []
      - cookieAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
  /waitlist/:
    get:
      operationId: waitlist_list
      description: Returns all waitlist entries ordered by waiting number. The waiting
        number is the order in which the user joined the waitlist.
      summary: Get all waitlists
      tags:
      - Waitlist
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Waitlist'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
    post:
      operationId: waitlist_create
      description: Send a POST request with the email of the user and optionally a
        ref string to add a new waitlist entry. Returns the newly created waitlist
        entry with the waiting number and created_at timestamp. A corresponding Knock
        user will also be created with the same ID and email.
      summary: Add a new waitlist
      tags:
      - Waitlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Waitlist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Waitlist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Waitlist'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Waitlist'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
          description: ''
components:
  schemas:
    AliasSkill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The unique identifier for the experience entry.
        category:
          type: string
          nullable: true
          description: The category of the skill. (optional)
          maxLength: 50
        name:
          type: string
          description: The name of the skill.
          maxLength: 250
        preferred:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the skill entry was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the skill entry was last updated.
      required:
      - category
      - created_at
      - id
      - name
      - updated_at
    Certification:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        resume_section:
          type: string
          readOnly: true
        name:
          type: string
          description: Name of the certification.
          maxLength: 255
        issuing_organization:
          type: string
          nullable: true
          maxLength: 255
        issue_date:
          type: string
          format: date
          nullable: true
          description: Date when the certification was issued.
        credential_url:
          type: string
          format: uri
          nullable: true
          description: Link to the certification credential.
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the certification was first created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the certification was last updated.
        user:
          type: string
          description: The user who owns this certification
      required:
      - created_at
      - id
      - name
      - resume_section
      - updated_at
      - user
    CertificationUpsert:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          description: Name of the certification.
          maxLength: 255
        issuing_organization:
          type: string
          nullable: true
          maxLength: 255
        issue_date:
          type: string
          format: date
          nullable: true
          description: Date when the certification was issued.
        credential_url:
          type: string
          format: uri
          nullable: true
          description: Link to the certification credential.
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the certification was first created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the certification was last updated.
        user:
          type: string
          description: The user who owns this certification
        resume_section:
          type: string
          format: uuid
          description: The unique identifier for the resume section entry.
      required:
      - created_at
      - id
      - name
      - resume_section
      - updated_at
      - user
    Country:
      type: object
      properties:
        code:
          type: string
          description: The ISO 3166-1 alpha-3 code of the country.
          maxLength: 3
        name:
          type: string
          description: The name of the country.
          maxLength: 250
      required:
      - code
      - name
    EducationFull:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        user:
          type: string
          description: The user who the education entry belongs to.
        resume_section:
          type: string
          readOnly: true
        institution_name:
          type: string
          description: The name of the institution the user studied at.
          maxLength: 250
        field_of_study:
          type: string
          description: The field of study the user studied.
          maxLength: 250
        degree:
          type: string
          nullable: true
          description: The degree the user obtained. (optional)
          maxLength: 250
        country:
          type: string
          readOnly: true
        started_from_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the education started (1-12).
        started_from_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the education started (YYYY).
        finished_at_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the education was completed (1-12).
        finished_at_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the education was completed (YYYY).
        current:
          type: boolean
          description: 'Whether the user is currently studying. default: False'
        description:
          type: string
          nullable: true
          description: The description of the education entry. User can provide any
            kind of description for that user. Usually in HTML format to support rich
            text. (optional)
          maxLength: 3000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the education entry was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the education entry was last updated.
      required:
      - country
      - created_at
      - field_of_study
      - id
      - institution_name
      - resume_section
      - updated_at
      - user
    EducationUpsert:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        institution_name:
          type: string
          description: The name of the institution the user studied at.
          maxLength: 250
        field_of_study:
          type: string
          description: The field of study the user studied.
          maxLength: 250
        degree:
          type: string
          nullable: true
          description: The degree the user obtained. (optional)
          maxLength: 250
        started_from_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the education started (1-12).
        started_from_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the education started (YYYY).
        finished_at_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the education was completed (1-12).
        finished_at_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the education was completed (YYYY).
        current:
          type: boolean
          description: 'Whether the user is currently studying. default: False'
        description:
          type: string
          nullable: true
          description: The description of the education entry. User can provide any
            kind of description for that user. Usually in HTML format to support rich
            text. (optional)
          maxLength: 3000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the education entry was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the education entry was last updated.
        user:
          type: string
          description: The user who the education entry belongs to.
        resume_section:
          type: string
          format: uuid
          description: The resume section the education entry belongs to.
        country:
          type: string
          description: The country the institution is located in. (optional)
          nullable: true
      required:
      - created_at
      - field_of_study
      - id
      - institution_name
      - resume_section
      - updated_at
      - user
    Error:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: The unique identifier for the error response. This is useful
            for tracking the error in the logs and in Sentry if it is enabled.
        code:
          type: string
          description: The error code that is unique to the error type. This can be
            used to identify the error type and can be used for debugging.
        message:
          type: string
          description: The error message that is human readable and can be used to
            understand the error. Usually fit to be displayed to the user.
        details:
          type: string
          description: The error details that can be used to understand the error
            in more detail. This can be used for debugging purposes.
        extra:
          type: string
          description: The extra data that can be used to understand the error in
            more detail. This is usually not displayed to the user and might include
            stacktrace and sensitive information.
      required:
      - code
      - details
      - extra
      - message
      - uuid
    ErrorEnvelope:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
      - error
    ErrorListEnvelope:
      type: object
      properties:
        code:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorEnvelope'
        message:
          type: string
      required:
      - code
      - errors
      - message
    ExperienceFull:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        user:
          type: string
          description: The user who the experience entry belongs to.
        resume_section:
          type: string
          readOnly: true
        company_name:
          type: string
          description: The name of the company the user worked at.
          maxLength: 250
        job_title:
          type: string
          description: The title of the job the user had.
          maxLength: 250
        employment_type:
          type: string
          readOnly: true
        city:
          type: string
          nullable: true
          description: The city the company is located in. (optional)
          maxLength: 50
        country:
          type: string
          readOnly: true
        started_from_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the experience started (1-12).
        started_from_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the experience started (YYYY).
        finished_at_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the experience was completed (1-12).
        finished_at_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the experience was completed (YYYY).
        current:
          type: boolean
          description: 'Whether the user is currently working. default: False'
        description:
          type: string
          nullable: true
          description: The description of the experience entry. User can provide any
            kind of description for that user. Usually in HTML format to support rich
            text. (optional)
          maxLength: 3000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the experience entry was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the experience entry was last updated.
      required:
      - company_name
      - country
      - created_at
      - employment_type
      - id
      - job_title
      - resume_section
      - updated_at
      - user
    ExperienceUpsert:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        company_name:
          type: string
          description: The name of the company the user worked at.
          maxLength: 250
        job_title:
          type: string
          description: The title of the job the user had.
          maxLength: 250
        employment_type:
          enum:
          - flt
          - prt
          - con
          - int
          - fre
          - sel
          - vol
          - tra
          type: string
          x-spec-enum-id: 35057d0cc661fae0
          description: |-
            The type of employment the user had. Can be Full Time, Part Time, Contract, Internship, Freelance, Self Employed, Volunteer or Trainee.

            * `flt` - Full Time
            * `prt` - Part Time
            * `con` - Contract
            * `int` - Internship
            * `fre` - Freelance
            * `sel` - Self Employed
            * `vol` - Volunteer
            * `tra` - Trainee
        city:
          type: string
          nullable: true
          description: The city the company is located in. (optional)
          maxLength: 50
        started_from_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the experience started (1-12).
        started_from_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the experience started (YYYY).
        finished_at_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the experience was completed (1-12).
        finished_at_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the experience was completed (YYYY).
        current:
          type: boolean
          description: 'Whether the user is currently working. default: False'
        description:
          type: string
          nullable: true
          description: The description of the experience entry. User can provide any
            kind of description for that user. Usually in HTML format to support rich
            text. (optional)
          maxLength: 3000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the experience entry was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the experience entry was last updated.
        user:
          type: string
          description: The user who the experience entry belongs to.
        resume_section:
          type: string
          format: uuid
          description: The unique identifier for the resume section entry.
        country:
          type: string
          description: The country the company is located in. (optional)
          nullable: true
      required:
      - company_name
      - created_at
      - employment_type
      - id
      - job_title
      - resume_section
      - updated_at
      - user
    HealthCheck:
      type: object
      properties:
        instance_id:
          type: string
          description: The id of the instance from which the health check response
            has been received.
        status:
          enum:
          - OPERATIONAL
          - DEGRADED
          type: string
          x-spec-enum-id: 893c6aabf915415a
          description: |-
            The health status of the server. The status can be ok, degraded or failing.

            * `OPERATIONAL` - OPERATIONAL
            * `DEGRADED` - DEGRADED
        details:
          $ref: '#/components/schemas/HealthDetails'
      required:
      - details
      - instance_id
      - status
    HealthDetails:
      type: object
      properties:
        sentry:
          enum:
          - OPERATIONAL
          - UNINITIALIZED
          - FAILED
          type: string
          x-spec-enum-id: 80e18a4a4884b03a
          description: |-
            The status of the sentry integration. If False, the sentry is not initialized, possibly due to absense of environment variables, which is expected or misconfigured initialization.

            * `OPERATIONAL` - OPERATIONAL
            * `UNINITIALIZED` - UNINITIALIZED
            * `FAILED` - FAILED
        clerk:
          enum:
          - OPERATIONAL
          - DOWN
          type: string
          x-spec-enum-id: b596af6019cf09ff
          description: |-
            The health status of Clerk integration. The status can be OPERATIONAL or DOWN.

            * `OPERATIONAL` - OPERATIONAL
            * `DOWN` - DOWN
        db:
          enum:
          - OPERATIONAL
          - DEGRADED
          - FATAL
          type: string
          x-spec-enum-id: 30d9ff093e6722d6
          description: |-
            The health status of  Clerk connection. The status can be OPERATIONAL, DEGRADED or FATAL.

            * `OPERATIONAL` - OPERATIONAL
            * `DEGRADED` - DEGRADED
            * `FATAL` - FATAL
        util_service:
          enum:
          - OPERATIONAL
          - DISCONNECTED
          - FAILED
          type: string
          x-spec-enum-id: 5b01acf14d7b5dd6
          description: |-
            The health status of gRPC:util connection. The status can be OPERATIONAL, DISCONNECTED or FAILED.

            * `OPERATIONAL` - OPERATIONAL
            * `DISCONNECTED` - DISCONNECTED
            * `FAILED` - FAILED
      required:
      - clerk
      - db
      - sentry
      - util_service
    JobFull:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the job entry.
        job_url:
          type: string
          nullable: true
          description: The URL of the job posting. (optional)
          maxLength: 1000
        title:
          type: string
          description: The title of the job as mentioned in the job posting. If not
            available, a meaningful title would be auto-generated.
          maxLength: 250
        company_name:
          type: string
          description: The name of the company that posted the job.
          maxLength: 250
        location:
          type: string
          nullable: true
          description: The location of the job as mentioned in the job posting. (optional)
          maxLength: 100
        salary:
          type: string
          readOnly: true
        requirements:
          nullable: true
          description: An array representation of the requirements of the job as mentioned
            in the job posting. (optional)
        description:
          type: string
          nullable: true
          description: The description of the job as mentioned in the job posting.
            (optional)
          maxLength: 3000
        responsibilities:
          nullable: true
          description: An array representation of the responsibilities the candidate
            would be undertaking as mentioned in the job posting. (optional)
        benefits:
          nullable: true
          description: An array representation of the benefits the candidate would
            get as mentioned in the job posting. (optional)
        status:
          type: string
          readOnly: true
      required:
      - company_name
      - id
      - salary
      - status
      - title
    PatchedCertificationUpsert:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          description: Name of the certification.
          maxLength: 255
        issuing_organization:
          type: string
          nullable: true
          maxLength: 255
        issue_date:
          type: string
          format: date
          nullable: true
          description: Date when the certification was issued.
        credential_url:
          type: string
          format: uri
          nullable: true
          description: Link to the certification credential.
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the certification was first created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the certification was last updated.
        user:
          type: string
          description: The user who owns this certification
        resume_section:
          type: string
          format: uuid
          description: The unique identifier for the resume section entry.
    PatchedEducationUpsert:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        institution_name:
          type: string
          description: The name of the institution the user studied at.
          maxLength: 250
        field_of_study:
          type: string
          description: The field of study the user studied.
          maxLength: 250
        degree:
          type: string
          nullable: true
          description: The degree the user obtained. (optional)
          maxLength: 250
        started_from_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the education started (1-12).
        started_from_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the education started (YYYY).
        finished_at_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the education was completed (1-12).
        finished_at_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the education was completed (YYYY).
        current:
          type: boolean
          description: 'Whether the user is currently studying. default: False'
        description:
          type: string
          nullable: true
          description: The description of the education entry. User can provide any
            kind of description for that user. Usually in HTML format to support rich
            text. (optional)
          maxLength: 3000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the education entry was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the education entry was last updated.
        user:
          type: string
          description: The user who the education entry belongs to.
        resume_section:
          type: string
          format: uuid
          description: The resume section the education entry belongs to.
        country:
          type: string
          description: The country the institution is located in. (optional)
          nullable: true
    PatchedExperienceUpsert:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        company_name:
          type: string
          description: The name of the company the user worked at.
          maxLength: 250
        job_title:
          type: string
          description: The title of the job the user had.
          maxLength: 250
        employment_type:
          enum:
          - flt
          - prt
          - con
          - int
          - fre
          - sel
          - vol
          - tra
          type: string
          x-spec-enum-id: 35057d0cc661fae0
          description: |-
            The type of employment the user had. Can be Full Time, Part Time, Contract, Internship, Freelance, Self Employed, Volunteer or Trainee.

            * `flt` - Full Time
            * `prt` - Part Time
            * `con` - Contract
            * `int` - Internship
            * `fre` - Freelance
            * `sel` - Self Employed
            * `vol` - Volunteer
            * `tra` - Trainee
        city:
          type: string
          nullable: true
          description: The city the company is located in. (optional)
          maxLength: 50
        started_from_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the experience started (1-12).
        started_from_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the experience started (YYYY).
        finished_at_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the experience was completed (1-12).
        finished_at_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the experience was completed (YYYY).
        current:
          type: boolean
          description: 'Whether the user is currently working. default: False'
        description:
          type: string
          nullable: true
          description: The description of the experience entry. User can provide any
            kind of description for that user. Usually in HTML format to support rich
            text. (optional)
          maxLength: 3000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the experience entry was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the experience entry was last updated.
        user:
          type: string
          description: The user who the experience entry belongs to.
        resume_section:
          type: string
          format: uuid
          description: The unique identifier for the resume section entry.
        country:
          type: string
          description: The country the company is located in. (optional)
          nullable: true
    PatchedProficiency:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        skill:
          $ref: '#/components/schemas/Skill'
        resume_section:
          type: string
          readOnly: true
        level:
          enum:
          - BEG
          - INT
          - ADV
          - EXP
          - null
          type: string
          description: |-
            * `BEG` - Beginner
            * `INT` - Intermediate
            * `ADV` - Advanced
            * `EXP` - Expert
          x-spec-enum-id: 0b41a707f07a9295
          nullable: true
    PatchedProjectUpsert:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        category:
          type: string
          nullable: true
          description: Category or type of the project (e.g., Web Development, Mobile
            App).
          maxLength: 255
        name:
          type: string
          description: Name of the project.
          maxLength: 255
        description:
          type: string
          nullable: true
          description: Detailed description of the project and its objectives.
        role:
          type: string
          nullable: true
          description: Your role or position in this project (e.g., Lead Developer,
            UI Designer).
          maxLength: 255
        github_url:
          type: string
          format: uri
          nullable: true
          description: Link to the project's GitHub repository.
          maxLength: 200
        live_url:
          type: string
          format: uri
          nullable: true
          description: Link to the live/deployed version of the project.
          maxLength: 200
        started_from_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the project started (1-12).
        started_from_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the project started (YYYY).
        finished_at_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the project was completed (1-12).
        finished_at_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the project was completed (YYYY).
        current:
          type: boolean
          nullable: true
          description: Indicates if this is a current/ongoing project.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the project was first created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the project was last updated.
        user:
          type: string
          description: The user who owns this project
        resume_section:
          type: string
          format: uuid
          description: The unique identifier for the resume section entry.
        skills_used:
          type: array
          items:
            type: string
            format: uuid
          description: Technical skills and technologies used in this project.
    PatchedUserUpsert:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the user. Typically provided from
            the client side while creating the user.
        password:
          type: string
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        title:
          type: string
          nullable: true
          description: The title of the user. This can be Mr., Mrs., Dr., etc. (optional)
          maxLength: 10
        first_name:
          type: string
          description: The first name of the user.
          maxLength: 50
        last_name:
          type: string
          nullable: true
          description: The last name of the user. (optional)
          maxLength: 50
        email:
          type: string
          format: email
          description: The email of the user. Needs to be unique and a valid email.
          maxLength: 254
        phone:
          type: string
          nullable: true
          description: The phone number of the user. (optional)
          maxLength: 25
        dob:
          type: string
          format: date
          nullable: true
          description: The date of birth of the user. (optional)
        nationality:
          type: string
          nullable: true
          description: The nationality of the user. (optional)
          maxLength: 50
        address:
          type: string
          nullable: true
          description: The address line of the user. Typically includes the apartment
            or plot number and the locality. (optional)
          maxLength: 500
        city:
          type: string
          nullable: true
          description: The city the user lives in. (optional)
          maxLength: 50
        postal:
          type: string
          nullable: true
          description: The postal code of the user. (optional)
          maxLength: 50
        website:
          type: string
          nullable: true
          description: The user's personal portfolio or blog website. (optional)
          maxLength: 50
        profile_text:
          type: string
          nullable: true
          description: The profile text of the user. This can be a short bio or a
            summary This would be shows on top of the user's resume. (optional)
          maxLength: 1000
        is_active:
          type: boolean
          readOnly: true
        is_staff:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user was last updated.
        country:
          type: string
          description: The country the user lives in. (optional)
          nullable: true
    Proficiency:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        skill:
          $ref: '#/components/schemas/Skill'
        resume_section:
          type: string
          readOnly: true
        level:
          enum:
          - BEG
          - INT
          - ADV
          - EXP
          - null
          type: string
          description: |-
            * `BEG` - Beginner
            * `INT` - Intermediate
            * `ADV` - Advanced
            * `EXP` - Expert
          x-spec-enum-id: 0b41a707f07a9295
          nullable: true
      required:
      - id
      - resume_section
      - skill
    Project:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        skills_used:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        resume_section:
          type: string
          readOnly: true
        category:
          type: string
          nullable: true
          description: Category or type of the project (e.g., Web Development, Mobile
            App).
          maxLength: 255
        name:
          type: string
          description: Name of the project.
          maxLength: 255
        description:
          type: string
          nullable: true
          description: Detailed description of the project and its objectives.
        role:
          type: string
          nullable: true
          description: Your role or position in this project (e.g., Lead Developer,
            UI Designer).
          maxLength: 255
        github_url:
          type: string
          format: uri
          nullable: true
          description: Link to the project's GitHub repository.
          maxLength: 200
        live_url:
          type: string
          format: uri
          nullable: true
          description: Link to the live/deployed version of the project.
          maxLength: 200
        started_from_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the project started (1-12).
        started_from_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the project started (YYYY).
        finished_at_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the project was completed (1-12).
        finished_at_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the project was completed (YYYY).
        current:
          type: boolean
          nullable: true
          description: Indicates if this is a current/ongoing project.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the project was first created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the project was last updated.
        user:
          type: string
          description: The user who owns this project
      required:
      - created_at
      - id
      - name
      - resume_section
      - skills_used
      - updated_at
      - user
    ProjectUpsert:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        category:
          type: string
          nullable: true
          description: Category or type of the project (e.g., Web Development, Mobile
            App).
          maxLength: 255
        name:
          type: string
          description: Name of the project.
          maxLength: 255
        description:
          type: string
          nullable: true
          description: Detailed description of the project and its objectives.
        role:
          type: string
          nullable: true
          description: Your role or position in this project (e.g., Lead Developer,
            UI Designer).
          maxLength: 255
        github_url:
          type: string
          format: uri
          nullable: true
          description: Link to the project's GitHub repository.
          maxLength: 200
        live_url:
          type: string
          format: uri
          nullable: true
          description: Link to the live/deployed version of the project.
          maxLength: 200
        started_from_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the project started (1-12).
        started_from_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the project started (YYYY).
        finished_at_month:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
          description: Month when the project was completed (1-12).
        finished_at_year:
          type: integer
          maximum: 2100
          minimum: 1900
          nullable: true
          description: Year when the project was completed (YYYY).
        current:
          type: boolean
          nullable: true
          description: Indicates if this is a current/ongoing project.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the project was first created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the project was last updated.
        user:
          type: string
          description: The user who owns this project
        resume_section:
          type: string
          format: uuid
          description: The unique identifier for the resume section entry.
        skills_used:
          type: array
          items:
            type: string
            format: uuid
          description: Technical skills and technologies used in this project.
      required:
      - created_at
      - id
      - name
      - resume_section
      - updated_at
      - user
    ResumeExportResponse:
      type: object
      properties:
        pdf_url:
          type: string
          format: uuid
          description: The public CDN URL of the exported PDF file of the resume
        latex_url:
          type: string
          format: uuid
          description: The public CDN URL of the exported TEX file of the resume
      required:
      - latex_url
      - pdf_url
    ResumeFull:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the resume entry.
        base:
          type: boolean
          default: false
          description: 'Whether the resume is a base resume for the user. One user
            can '
        user:
          type: string
          readOnly: true
        job:
          type: string
          readOnly: true
        status:
          type: string
          readOnly: true
        sections:
          type: string
          readOnly: true
        thumbnail:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - id
      - job
      - sections
      - status
      - user
    ResumeReplace:
      type: object
      description: Serializer for replacing an entire resume's sections in one request.
      properties:
        sections:
          type: array
          items:
            $ref: '#/components/schemas/ResumeReplaceSection'
          description: Ordered list of sections that will fully replace the resume's
            sections
          minItems: 1
      required:
      - sections
    ResumeReplaceSection:
      type: object
      description: |-
        Incoming section payload for replacing a resume.
        This is intentionally permissive on the nested data to allow clients
        to send the same structure produced by tailoring callbacks.
      properties:
        type:
          enum:
          - Skill
          - Experience
          - Education
          - Project
          - Certification
          type: string
          description: |-
            * `Skill` - Skill
            * `Experience` - Experience
            * `Education` - Education
            * `Project` - Project
            * `Certification` - Certification
          x-spec-enum-id: 707a2269f413cecf
        data:
          type: object
          additionalProperties: {}
      required:
      - type
    ResumeShort:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the resume entry.
        base:
          type: boolean
          default: false
          description: 'Whether the resume is a base resume for the user. One user
            can '
        user:
          type: string
          description: The user who the resume belongs to.
        job:
          type: string
          readOnly: true
        status:
          type: string
          readOnly: true
        thumbnail:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - id
      - job
      - status
      - user
    ResumeSkillUpsert:
      type: object
      properties:
        name:
          type: string
          description: The name of the skill.
        category:
          type: string
          description: The category of the skill.
        level:
          enum:
          - BEG
          - INT
          - ADV
          - EXP
          type: string
          x-spec-enum-id: 0b41a707f07a9295
          description: |-
            The proficiency level of the skill.

            * `BEG` - Beginner
            * `INT` - Intermediate
            * `ADV` - Advanced
            * `EXP` - Expert
      required:
      - category
      - level
      - name
    SectionRearrange:
      type: object
      description: |-
        Serializer for rearranging resume sections.
        Accepts an array of section IDs representing the desired order.
      properties:
        section_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Array of section IDs in the desired order
          minItems: 1
      required:
      - section_ids
    Skill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The unique identifier for the experience entry.
        category:
          type: string
          nullable: true
          description: The category of the skill. (optional)
          maxLength: 50
        name:
          type: string
          description: The name of the skill.
          maxLength: 250
        preferred:
          type: boolean
        alias:
          type: array
          items:
            $ref: '#/components/schemas/AliasSkill'
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the skill entry was last updated.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The date and time the skill entry was created.
      required:
      - alias
      - category
      - created_at
      - id
      - name
      - updated_at
    TailorRequest:
      type: object
      description: |-
        Request body for starting the resume tailoring process.
        Provide either a job URL or a sufficiently long job description.
      properties:
        target:
          type: string
          description: Job URL or long job description to tailor the resume against.
      required:
      - target
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the user. Typically provided from
            the client side while creating the user.
        title:
          type: string
          nullable: true
          description: The title of the user. This can be Mr., Mrs., Dr., etc. (optional)
          maxLength: 10
        first_name:
          type: string
          description: The first name of the user.
          maxLength: 50
        last_name:
          type: string
          nullable: true
          description: The last name of the user. (optional)
          maxLength: 50
        email:
          type: string
          format: email
          description: The email of the user. Needs to be unique and a valid email.
          maxLength: 254
        phone:
          type: string
          nullable: true
          description: The phone number of the user. (optional)
          maxLength: 25
        dob:
          type: string
          format: date
          nullable: true
          description: The date of birth of the user. (optional)
        nationality:
          type: string
          nullable: true
          description: The nationality of the user. (optional)
          maxLength: 50
        address:
          type: string
          nullable: true
          description: The address line of the user. Typically includes the apartment
            or plot number and the locality. (optional)
          maxLength: 500
        city:
          type: string
          nullable: true
          description: The city the user lives in. (optional)
          maxLength: 50
        postal:
          type: string
          nullable: true
          description: The postal code of the user. (optional)
          maxLength: 50
        country:
          $ref: '#/components/schemas/Country'
        website:
          type: string
          nullable: true
          description: The user's personal portfolio or blog website. (optional)
          maxLength: 50
        profile_text:
          type: string
          nullable: true
          description: The profile text of the user. This can be a short bio or a
            summary This would be shows on top of the user's resume. (optional)
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user was last updated.
      required:
      - country
      - created_at
      - email
      - first_name
      - id
      - updated_at
    Waitlist:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The unique identifier for the waitlist entry.
        email:
          type: string
          format: email
          description: The email of the user who joined the waitlist.
          maxLength: 254
        referrer:
          type: string
          description: The referrer of the user who joined the waitlist. Usually the
            source they have come from.
          maxLength: 50
        waiting_number:
          type: integer
          readOnly: true
          description: The waiting number of the user who joined the waitlist.
        has_access:
          type: boolean
          readOnly: true
          description: Whether the user has been granted access to the platform.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp at which the user joined the waitlist.
      required:
      - created_at
      - email
      - has_access
      - id
      - waiting_number
    WaitlistBulkUpdate:
      type: object
      properties:
        waitlist_ids:
          type: array
          items:
            type: string
            format: uuid
          description: List of waitlist entry IDs to update
        has_access:
          type: boolean
          description: Whether to grant or revoke access for the selected users
      required:
      - has_access
      - waitlist_ids
    WaitlistBulkUpdateResponse:
      type: object
      properties:
        updated_count:
          type: integer
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Waitlist'
      required:
      - entries
      - updated_count
    WaitlistUpdate:
      type: object
      properties:
        has_access:
          type: boolean
          description: Whether the user has been granted access to the platform.
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
servers:
- url: https://api.letraz.app/api/v1
  description: Production Server
- url: http://localhost:8000/api/v1
  description: Local Development Server
tags:
- name: Core APIs
  description: Core APIs for Letraz Backend
- name: Waitlist
  description: Mange waitlist, signups, retrieve waitlist and everything related to
    waitlist
- name: User
  description: Get or update user details of currently logged in user
- name: Job object
  description: Manage job objects, retrieve job objects and everything related to
    job objects
- name: Resume object
  description: Manage resume objects, retrieve resume objects and everything related
    to resume objects
- name: Education object
  description: Manage education objects, retrieve education objects and everything
    related to education objects
- name: Experience object
  description: Manage experience objects, retrieve experience objects and everything
    related to experience objects
